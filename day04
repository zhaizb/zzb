异常的捕获
Try{
	编写所有可能发生异常的语句；
}
Catch(异常类型 变量名){
	编写针对该类异常处理的语句;
}
…
Finally{
	编写无论是否发生异常都应该执行的语句;
}

注意
如果需要多个catch分支时，小类型的异常放在大类型的前面
懒人写法
	Catch(Exception e){…}
Finally {} 中的代码主要用于进行善后工作的处理，如：关闭打开的文件或删除文件等

异常的抛出
在某些特殊场合中无法处理或不便于处理发生的异常，此时就需要将此异常转移给该方法的调用者处理

格式
访问控制符 返回值类型 方法名称（形参列表） throws 异常类型1，异常类型2，…{}

子类重写的方法可以抛出小于等于父类的或不抛出异常，不能抛出更大或平级但不一样的异常。

自定义异常
虽然java官方提供了大量异常类，但没有某些针对性（年龄）不合理的异常类，需要程序员自己编写

流程
自定义XXXException继承Exception或其子类；
提供两个版本构造方法：无参构造 与 字符串作为参数的构造

异常对象的产生
Throw new 异常类型();
Throw new NullPointerException ();  表示产生空指针异常

file类
Java.io.File类主要用于描述文件与目录的路径信息，可以获取文件的大小特征

常用方法
File(String pathname) - 根据参数指定的路径名来构造对象
Boolean exists() - 用于判断文件或目录是否存在
String getName() - 用于判断文件或目录的名称 
Long length() - 用于获取文件的长度/大小
Long lastModified() - 用于获取最后一次修改时间（返回最后一次修改时间距离1970年1月1日0时0分0秒的毫秒数，通常与Date搭配使用）
String getAbsolutePath() - 用于获取绝对路径信息。（绝对路径：主要指以根目录开始的路径信息，如：c:/…）(相对路径：主要指以当前工作目录开始的路径信息，如：./…    .代表当前目录   …代表当前目录的上一级目录)   （以后开发中都使用相对路径）
Boolean delete() - 用于删除文件或目录
Boolean createNewFile() - 用于创建新的空文件夹
Boolean mkdir() - 用于创建单层目录
Boolean mkdirs() - 用于创建多层目录
File[] listFiles() - 用于获取当前目录中的所有内容
Boolean isFile() - 用于判断是否为一个标准文件
Boolean isDirectory() - 用于判断是否为一个目录
